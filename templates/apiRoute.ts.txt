import { ${CAMEL_CASE}Req, T${CAMEL_CASE}Res } from "@/app/_lib/both/requests";
import { NextRequest, NextResponse } from "next/server";
import { checkRequest, checkSessionAndRequest, GenericUserDoc } from "@/app/_lib/submodules/pr-lib-user/server";
import { productionOrDebugConsole, sleep } from "@/app/_lib/submodules/pr-lib-utils/both";
import { TUserDataExt, VERSION } from "@/app/_lib/both/data";
import { getDb } from "@/app/_lib/server/db";
import { ObjectId } from "mongodb";
import assert from "assert";
import { i18nServerArg } from "@/app/_lib/i18n/server";

console.info('global.console will be set to productionOrDebugConsole.');
global.console = productionOrDebugConsole;

function myRes(res: T${CAMEL_CASE}Res) {
    return NextResponse.json(res);
}

export async function POST(request: NextRequest) {
    const dbProm = getDb();

    // BEGIN Alternative 1
    const check = await checkRequest(${CAMEL_CASE}Req(UserDataExt), request, VERSION);
    if (check.type === 'error') return check.response;
    const { json } = check;
    // END Alternative 1

    // BEGIN Alternative 2
    // const check = await checkSessionAndRequest(dbProm, ${CAMEL_CASE}Req, request, VERSION);
    // if (check.type === 'error') return check.response;
    // const { db, json } = check;
    // END Alternative 2

    // BEGIN Alternative 3
    // const check = await checkAuthor(${CAMEL_CASE}Req, request)
    // console.log('check.type', check.type);
    // if (check.type === 'error') return check.response;
    // if (check.type === 'noAuth') return myRes({
    //     type: 'noAuth'
    // })
    // const { db, json } = check;
    // END Alternative 3

    // BEGIN Alternative 4
    // const check = await checkAdmin(${CAMEL_CASE}Req, request)
    // console.log('check.type', check.type);
    // if (check.type === 'error') return check.response;
    // if (check.type === 'noAuth') return myRes({
    //     type: 'noAuth'
    // })
    // const { db, json } = check;
    // END Alternative 4


    // TODO implement functionality

    return myRes({
        type: 'success',
        // TODO ...?
    })
}
